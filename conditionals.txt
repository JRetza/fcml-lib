0  O 			Overflow
1  NO 			No overflow
2  B, NAE, C 	Below, Not above or equal
3  NB, AE, NC 	Not below, Above or equal
4  E, Z 		Equal, Zero
5  NE, NZ 		Not equal, Not zero
6  BE, NA 		Below or equal, Not above
7  NBE, A 		Not below or equal, Above
8  S 			Sign
9  NS 			Not sign
A  P, PE 		Parity, Parity Even
B  NP, PO 		Not parity, Parity Odd
C  L, NGE 		Less than, Not greater than or equal to
D  NL, GE 		Not less than, Greater than or equal to
E  LE, NG 		Less than or equal to, Not greater than
F  NLE, G 		Not less than or equal to, Greater than

lp (1)  (2)     (show carry)
----------------------------
0  O	0
1  NO	NO
2  B,   NAE, 	(C)
3  NB,  AE, 	(NC)
4  E,   Z
5  NE,  NZ
6  BE,  NA
7  NBE, A
8  S	S
9  NS	NS
A  P,   PE
B  NP,  PO
C  L,   NGE
D  NL,  GE
E  LE,  NG
F  NLE, G

70 cb JO rel8 A Valid Valid Jump short if overflow (OF=1).
71 cb JNO rel8 A Valid Valid Jump short if not overflow(OF=0).
72 cb JB rel8 A Valid Valid Jump short if below (CF=1).
+72 cb JC rel8 A Valid Valid Jump short if carry (CF=1).
72 cb JNAE rel8 A Valid Valid Jump short if not above or equal (CF=1).
73 cb JAE rel8 A Valid Valid Jump short if above or equal (CF=0).
73 cb JNB rel8 A Valid Valid Jump short if not below (CF=0).
+73 cb JNC rel8 A Valid Valid Jump short if not carry (CF=0).
74 cb JE rel8 A Valid Valid Jump short if equal (ZF=1).
74 cb JZ rel8 A Valid Valid Jump short if zero (ZF ? 1).
75 cb JNE rel8 A Valid Valid Jump short if not equal (ZF=0).
75 cb JNZ rel8 A Valid Valid Jump short if not zero (ZF=0).
76 cb JBE rel8 A Valid Valid Jump short if below or equal (CF=1 or ZF=1).
76 cb JNA rel8 A Valid Valid Jump short if not above (CF=1 or ZF=1).
77 cb JA rel8 A Valid Valid Jump short if above (CF=0 and ZF=0).
77 cb JNBE rel8 A Valid Valid Jump short if not below or equal (CF=0 and ZF=0).
78 cb JS rel8 A Valid Valid Jump short if sign (SF=1).
79 cb JNS rel8 A Valid Valid Jump short if not sign (SF=0).
7A cb JP rel8 A Valid Valid Jump short if parity (PF=1).
7A cb JPE rel8 A Valid Valid Jump short if parity even (PF=1).
7B cb JNP rel8 A Valid Valid Jump short if not parity (PF=0).
7B cb JPO rel8 A Valid Valid Jump short if parity odd (PF=0).
7C cb JL rel8 A Valid Valid Jump short if less (SF? OF).
7C cb JNGE rel8 A Valid Valid Jump short if not greater or equal (SF? OF).
7D cb JGE rel8 A Valid Valid Jump short if greater or equal (SF=OF).
7D cb JNL rel8 A Valid Valid Jump short if not less (SF=OF).
7E cb JLE rel8 A Valid Valid Jump short if less or equal (ZF=1 or SF? OF).
7E cb JNG rel8 A Valid Valid Jump short if not greater (ZF=1 or SF? OF). 3-564 Vol. 2A Jcc—Jump if Condition Is Met INSTRUCTION SET REFERENCE, A-M
7F cb JG rel8 A Valid Valid Jump short if greater (ZF=0 and SF=OF).
7F cb JNLE rel8 A Valid Valid Jump short if not less or equal (ZF=0 and SF=OF).

(Sprawdziæ)
E3 cb JCXZ rel8 A N.E. Valid Jump short if CX register is 0.
E3 cb JECXZ rel8 A Valid Valid Jump short if ECX register is 0.
E3 cb JRCXZ rel8 A Valid N.E. Jump short if RCX register is 0.
		
0F 80 cd JO rel32 A Valid Valid Jump near if overflow
0F 80 cw JO rel16 A N.S. Valid Jump near if overflow
0F 81 cd JNO rel32 A Valid Valid Jump near if not overflow
0F 81 cw JNO rel16 A N.S. Valid Jump near if not overflow
0F 82 cd JB rel32 A Valid Valid Jump near if below (CF=1).
+0F 82 cd JC rel32 A Valid Valid Jump near if carry (CF=1).
0F 82 cd JNAE rel32 A Valid Valid Jump near if not above or
0F 82 cw JB rel16 A N.S. Valid Jump near if below (CF=1).Not supported in 64-bitmode.
+0F 82 cw JC rel16 A N.S. Valid Jump near if carry (CF=1).
0F 82 cw JNAE rel16 A N.S. Valid Jump near if not above or
0F 83 cd JAE rel32 A Valid Valid Jump near if above or equal (CF=0). 
0F 83 cd JNB rel32 A Valid Valid Jump near if not below
+0F 83 cd JNC rel32 A Valid Valid Jump near if not carry
0F 83 cw JAE rel16 A N.S. Valid Jump near if above or equal (CF=0). Not supported in 64- bit mode.
0F 83 cw JNB rel16 A N.S. Valid Jump near if not below
+0F 83 cw JNC rel16 A N.S. Valid Jump near if not carry
0F 84 cd JE rel32 A Valid Valid Jump near if equal (ZF=1).
0F 84 cd JZ rel32 A Valid Valid Jump near if 0 (ZF=1).
0F 84 cw JE rel16 A N.S. Valid Jump near if equal (ZF=1).
0F 84 cw JZ rel16 A N.S. Valid Jump near if 0 (ZF=1). Not
0F 85 cd JNE rel32 A Valid Valid Jump near if not equal
0F 85 cd JNZ rel32 A Valid Valid Jump near if not zero
0F 85 cw JNE rel16 A N.S. Valid Jump near if not equal
0F 85 cw JNZ rel16 A N.S. Valid Jump near if not zero
0F 86 cd JBE rel32 A Valid Valid Jump near if below or equal
0F 86 cd JNA rel32 A Valid Valid Jump near if not above
0F 86 cw JBE rel16 A N.S. Valid Jump near if below or equal
0F 86 cw JNA rel16 A N.S. Valid Jump near if not above
0F 87 cd JA rel32 A Valid Valid Jump near if above (CF=0 and ZF=0).
0F 87 cd JNBE rel32 A Valid Valid Jump near if not below or
0F 87 cw JA rel16 A N.S. Valid Jump near if above (CF=0 and ZF=0). Not supported in 64-bit mode.
0F 87 cw JNBE rel16 A N.S. Valid Jump near if not below or
0F 88 cd JS rel32 A Valid Valid Jump near if sign (SF=1).
0F 88 cw JS rel16 A N.S. Valid Jump near if sign (SF=1). Not
0F 89 cd JNS rel32 A Valid Valid Jump near if not sign (SF=0).
0F 89 cw JNS rel16 A N.S. Valid Jump near if not sign (SF=0).
0F 8A cd JP rel32 A Valid Valid Jump near if parity (PF=1).
0F 8A cd JPE rel32 A Valid Valid Jump near if parity even
0F 8A cw JP rel16 A N.S. Valid Jump near if parity (PF=1).
0F 8A cw JPE rel16 A N.S. Valid Jump near if parity even
0F 8B cd JNP rel32 A Valid Valid Jump near if not parity
0F 8B cd JPO rel32 A Valid Valid Jump near if parity odd
0F 8B cw JNP rel16 A N.S. Valid Jump near if not parity
0F 8B cw JPO rel16 A N.S. Valid Jump near if parity odd
0F 8C cd JL rel32 A Valid Valid Jump near if less (SF? OF).
0F 8C cd JNGE rel32 A Valid Valid Jump near if not greater or
0F 8C cw JL rel16 A N.S. Valid Jump near if less (SF? OF).
0F 8C cw JNGE rel16 A N.S. Valid Jump near if not greater or
0F 8D cd JGE rel32 A Valid Valid Jump near if greater or
0F 8D cd JNL rel32 A Valid Valid Jump near if not less
0F 8D cw JGE rel16 A N.S. Valid Jump near if greater or
0F 8D cw JNL rel16 A N.S. Valid Jump near if not less
0F 8E cd JLE rel32 A Valid Valid Jump near if less or equal
0F 8E cd JNG rel32 A Valid Valid Jump near if not greater
0F 8E cw JLE rel16 A N.S. Valid Jump near if less or equal
0F 8E cw JNG rel16 A N.S. Valid Jump near if not greater
0F 8F cd JG rel32 A Valid Valid Jump near if greater (ZF=0
0F 8F cd JNLE rel32 A Valid Valid Jump near if not less or
0F 8F cw JG rel16 A N.S. Valid Jump near if greater (ZF=0
0F 8F cw JNLE rel16 A N.S. Valid Jump near if not less or equal (ZF=0 and SF=OF).

0F 90 SETO r/m8 A Valid Valid Set byte if overflow (OF=1)
0F 91 SETNO r/m8 A Valid Valid Set byte if not overflow (OF=0).
0F 92 SETB r/m8 A Valid Valid Set byte if below (CF=1). 
+0F 92 SETC r/m8 A Valid Valid Set byte if carry (CF=1).
0F 92 SETNAE r/m8 A Valid Valid Set byte if not above or equal (CF=1).
0F 93 SETAE r/m8 A Valid Valid Set byte if above or equal (CF=0).
0F 93 SETNB r/m8 A Valid Valid Set byte if not below (CF=0).
+0F 93 SETNC r/m8 A Valid Valid Set byte if not carry (CF=0).
0F 94 SETE r/m8 A Valid Valid Set byte if equal (ZF=1).
0F 94 SETZ r/m8 A Valid Valid Set byte if zero (ZF=1).
0F 95 SETNE r/m8 A Valid Valid Set byte if not equal (ZF=0).
0F 95 SETNZ r/m8 A Valid Valid Set byte if not zero (ZF=0).
0F 96 SETBE r/m8 A Valid Valid Set byte if below or equal (CF=1 or ZF=1).
0F 96 SETNA r/m8 A Valid Valid Set byte if not above (CF=1 or ZF=1).
0F 97 SETA r/m8 A Valid Valid Set byte if above (CF=0 and ZF=0).
0F 97 SETNBE r/m8 A Valid Valid Set byte if not below or equal (CF=0 and ZF=0).
0F 98 SETS r/m8 A Valid Valid Set byte if sign (SF=1).
0F 99 SETNS r/m8 A Valid Valid Set byte if not sign (SF=0).
0F 9A SETP r/m8 A Valid Valid Set byte if parity (PF=1).
0F 9A SETPE r/m8 A Valid Valid Set byte if parity even(PF=1).
0F 9B SETNP r/m8 A Valid Valid Set byte if not parity (PF=0).
0F 9B SETPO r/m8 A Valid Valid Set byte if parity odd(PF=0).
0F 9C SETL r/m8 A Valid Valid Set byte if less (SF? OF).
0F 9C SETNGE r/m8 A Valid Valid Set byte if not greater orequal (SF? OF).
0F 9D SETGE r/m8 A Valid Valid Set byte if greater or equal (SF=OF).
0F 9D SETNL r/m8 A Valid Valid Set byte if not less (SF=OF).
0F 9E SETLE r/m8 A Valid Valid Set byte if less or equal (ZF=1 or SF? OF).
0F 9E SETNG r/m8 A Valid Valid Set byte if not greater(ZF=1 or SF? OF)
0F 9F SETG r/m8 A Valid Valid Set byte if greater (ZF=0 and SF=OF).
0F 9F SETNLE r/m8 A Valid Valid Set byte if not less or equal (ZF=0 and SF=OF).

REX + 0F 90 SETO r/m8* A Valid N.E. Set byte if overflow (OF=1).
REX + 0F 91 SETNO r/m8* A Valid N.E. Set byte if not overflow (OF=0).
REX + 0F 92 SETB r/m8* A Valid N.E. Set byte if below (CF=1).
+REX + 0F 92 SETC r/m8* A Valid N.E. Set byte if carry (CF=1).
REX + 0F 92 SETNAE r/m8* A Valid N.E. Set byte if not above or equal (CF=1).
REX + 0F 93 SETAE r/m8* A Valid N.E. Set byte if above or equal (CF=0).
REX + 0F 93 SETNB r/m8* A Valid N.E. Set byte if not below (CF=0).
+REX + 0F 93 SETNC r/m8* A Valid N.E. Set byte if not carry (CF=0).
REX + 0F 94 SETE r/m8* A Valid N.E. Set byte if equal (ZF=1).
REX + 0F 94 SETZ r/m8* A Valid N.E. Set byte if zero (ZF=1).
REX + 0F 95 SETNE r/m8* A Valid N.E. Set byte if not equal (ZF=0).
REX + 0F 95 SETNZ r/m8* A Valid N.E. Set byte if not zero (ZF=0).
REX + 0F 96 SETBE r/m8* A Valid N.E. Set byte if below or equal (CF=1 or ZF=1).
REX + 0F 96 SETNA r/m8* A Valid N.E. Set byte if not above (CF=1or ZF=1).
REX + 0F 97 SETA r/m8* A Valid N.E. Set byte if above (CF=0 and ZF=0).
REX + 0F 97 SETNBE r/m8* A Valid N.E. Set byte if not below or equal (CF=0 and ZF=0).
REX + 0F 98 SETS r/m8* A Valid N.E. Set byte if sign (SF=1).
REX + 0F 99 SETNS r/m8* A Valid N.E. Set byte if not sign (SF=0).
REX + 0F 9A SETP r/m8* A Valid N.E. Set byte if parity (PF=1).
REX + 0F 9A SETPE r/m8* A Valid N.E. Set byte if parity even(PF=1).
REX + 0F 9B SETNP r/m8* A Valid N.E. Set byte if not parity (PF=0).
REX + 0F 9B SETPO r/m8* A Valid N.E. Set byte if parity odd(PF=0).
REX + 0F 9C SETL r/m8* A Valid N.E. Set byte if less (SF? OF).
REX + 0F 9C SETNGE r/m8* A Valid N.E. Set byte if not grea ter or equal (SF? OF).
REX + 0F 9D SETGE r/m8* A Valid N.E. Set byte if greater or equal (SF=OF).
REX + 0F 9D SETNL r/m8* A Valid N.E. Set byte if not less (SF=OF).
REX + 0F 9E SETLE r/m8* A Valid N.E. Set byte if less or equal (ZF=1 or SF? OF).
REX + 0F 9E SETNG r/m8* A Valid N.E. Set byte if not greater (ZF=1 or SF? OF).
REX + 0F 9F SETG r/m8* A Valid N.E. Set byte if greater (ZF=0 and SF=OF).
REX + 0F 9F SETNLE r/m8* A Valid N.E. Set byte if not less or equal (ZF=0 and SF=OF).

0F 40 /r CMOVO r16, r/m16 A Valid Valid Move if overflow (OF=0).
0F 40 /r CMOVO r32, r/m32 A Valid Valid Move if overflow (OF=0).
0F 41 /r CMOVNO r16, r/m16 A Valid Valid Move if not overflow (OF=0).
0F 41 /r CMOVNO r32, r/m32 A Valid Valid Move if not overflow (OF=0).
0F 42 /r CMOVB r16, r/m16 A Valid Valid Move if below (CF=1).
0F 42 /r CMOVB r32, r/m32 A Valid Valid Move if below (CF=1).
+0F 42 /r CMOVC r16, r/m16 A Valid Valid Move if carry (CF=1).
+0F 42 /r CMOVC r32, r/m32 A Valid Valid Move if carry (CF=1).
0F 42 /r CMOVNAE r16, r/m16 A Valid Valid Move if not above or equal (CF=1).
0F 42 /r CMOVNAE r32, r/m32 A Valid Valid Move if not above or equal (CF=1).
0F 43 /r CMOVAE r16, r/m16 A Valid Valid Move if above or equal(CF=0).
0F 43 /r CMOVAE r32, r/m32 A Valid Valid Move if above or equal(CF=0).
0F 43 /r CMOVNB r16, r/m16 A Valid Valid Move if not below (CF=0).
0F 43 /r CMOVNB r32, r/m32 A Valid Valid Move if not below (CF=0).
+0F 43 /r CMOVNC r16, r/m16 A Valid Valid Move if not carry (CF=0).
+0F 43 /r CMOVNC r32, r/m32 A Valid Valid Move if not carry (CF=0).
0F 44 /r CMOVE r16, r/m16 A Valid Valid Move if equal (ZF=1).
0F 44 /r CMOVE r32, r/m32 A Valid Valid Move if equal (ZF=1).
0F 44 /r CMOVZ r16, r/m16 A Valid Valid Move if zero (ZF=1).
0F 44 /r CMOVZ r32, r/m32 A Valid Valid Move if zero (ZF=1).
0F 45 /r CMOVNE r16, r/m16 A Valid Valid Move if not equal (ZF=0).
0F 45 /r CMOVNE r32, r/m32 A Valid Valid Move if not equal (ZF=0).
0F 45 /r CMOVNZ r16, r/m16 A Valid Valid Move if not zero (ZF=0).
0F 45 /r CMOVNZ r32, r/m32 A Valid Valid Move if not zero (ZF=0).
0F 46 /r CMOVBE r16, r/m16 A Valid Valid Move if below or equal (CF=1 or ZF=1).
0F 46 /r CMOVBE r32, r/m32 A Valid Valid Move if below or equal (CF=1 or ZF=1). 
0F 46 /r CMOVNA r16, r/m16 A Valid Valid Move if not above (CF=1 or ZF=1).
0F 46 /r CMOVNA r32, r/m32 A Valid Valid Move if not above (CF=1 or ZF=1). 
0F 47 /r CMOVA r16, r/m16 A Valid Valid Move if above (CF=0 and ZF=0).
0F 47 /r CMOVA r32, r/m32 A Valid Valid Move if above (CF=0 and ZF=0).
0F 47 /r CMOVNBE r16, r/m16 A Valid Valid Move if not below or equal (CF=0 and ZF=0).
0F 47 /r CMOVNBE r32, r/m32 A Valid Valid Move if not below or equal (CF=0 and ZF=0).
0F 48 /r CMOVS r16, r/m16 A Valid Valid Move if sign (SF=1).
0F 48 /r CMOVS r32, r/m32 A Valid Valid Move if sign (SF=1).
0F 49 /r CMOVNS r16, r/m16 A Valid Valid Move if not sign (SF=0).
0F 49 /r CMOVNS r32, r/m32 A Valid Valid Move if not sign (SF=0). 

0F 4A /r CMOVP r16, r/m16 A Valid Valid Move if parity (PF=1).
0F 4A /r CMOVP r32, r/m32 A Valid Valid Move if parity (PF=1).
0F 4A /r CMOVPE r16, r/m16 A Valid Valid Move if parity even (PF=1).
0F 4A /r CMOVPE r32, r/m32 A Valid Valid Move if parity even (PF=1).
0F 4B /r CMOVNP r16, r/m16 A Valid Valid Move if not parity (PF=0).
0F 4B /r CMOVNP r32, r/m32 A Valid Valid Move if not parity (PF=0).
0F 4B /r CMOVPO r16, r/m16 A Valid Valid Move if parity odd (PF=0).
0F 4B /r CMOVPO r32, r/m32 A Valid Valid Move if parity odd (PF=0).
0F 4C /r CMOVL r16, r/m16 A Valid Valid Move if less (SF? OF).
0F 4C /r CMOVL r32, r/m32 A Valid Valid Move if less (SF? OF). 
0F 4C /r CMOVNGE r16, r/m16 A Valid Valid Move if not greater or equal (SF? OF).
0F 4C /r CMOVNGE r32, r/m32 A Valid Valid Move if not greater or equal (SF? OF).
0F 4D /r CMOVGE r16, r/m16 A Valid Valid Move if greater or equal (SF=OF).
0F 4D /r CMOVGE r32, r/m32 A Valid Valid Move if greater or equal (SF=OF).
0F 4D /r CMOVNL r16, r/m16 A Valid Valid Move if not less (SF=OF).
0F 4D /r CMOVNL r32, r/m32 A Valid Valid Move if not less (SF=OF).
0F 4E /r CMOVLE r16, r/m16 A Valid Valid Move if less or equal (ZF=1 or SF? OF).
0F 4E /r CMOVLE r32, r/m32 A Valid Valid Move if less or equal (ZF=1 or SF? OF).
0F 4E /r CMOVNG r16, r/m16 A Valid Valid Move if not greater (ZF=1 or SF? OF).
0F 4E /r CMOVNG r32, r/m32 A Valid Valid Move if not greater (ZF=1 or SF? OF).
0F 4F /r CMOVG r16, r/m16 A Valid Valid Move if greater (ZF=0 and SF=OF).
0F 4F /r CMOVG r32, r/m32 A Valid Valid Move if greater (ZF=0 and SF=OF).
0F 4F /r CMOVNLE r16, r/m16 A Valid Valid Move if not less or equal (ZF=0 and SF=OF).
0F 4F /r CMOVNLE r32, r/m32 A Valid Valid Move if not less or equal (ZF=0 and SF=OF).

REX.W + 0F 40 /r CMOVO r64, r/m64 A Valid N.E. Move if overflow (OF=0).
REX.W + 0F 41 /r CMOVNO r64, r/m64 A Valid N.E. Move if not overflow (OF=0).
REX.W + 0F 42 /r CMOVB r64, r/m64 A Valid N.E. Move if below (CF=1).
+REX.W + 0F 42 /r CMOVC r64, r/m64 A Valid N.E. Move if carry (CF=1).
REX.W + 0F 42 /r CMOVNAE r64, r/m64 A Valid N.E. Move if not above or equal (CF=1).
REX.W + 0F 43 /r CMOVAE r64, r/m64 A Valid N.E. Move if above or equal (CF=0).
REX.W + 0F 43 /r CMOVNB r64, r/m64 A Valid N.E. Move if not below (CF=0).
+REX.W + 0F 43 /r CMOVNC r64, r/m64 A Valid N.E. Move if not carry (CF=0).
REX.W + 0F 44 /r CMOVE r64, r/m64 A Valid N.E. Move if equal (ZF=1).
REX.W + 0F 44 /r CMOVZ r64, r/m64 A Valid N.E. Move if zero (ZF=1).
REX.W + 0F 45 /r CMOVNE r64, r/m64 A Valid N.E. Move if not equal (ZF=0).
REX.W + 0F 45 /r CMOVNZ r64, r/m64 A Valid N.E. Move if not zero (ZF=0).
REX.W + 0F 46 /r CMOVBE r64, r/m64 A Valid N.E. Move if below or equal (CF=1 or ZF=1).
REX.W + 0F 46 /r CMOVNA r64, r/m64 A Valid N.E. Move if not above (CF=1 or ZF=1).
REX.W + 0F 47 /r CMOVA r64, r/m64 A Valid N.E. Move if above (CF=0 andZF=0).
REX.W + 0F 47 /r CMOVNBE r64, r/m64 A Valid N.E. Move if not below or equal (CF=0 and ZF=0).
REX.W + 0F 48 /r CMOVS r64, r/m64 A Valid N.E. Move if sign (SF=1).
REX.W + 0F 49 /r CMOVNS r64, r/m64 A Valid N.E. Move if not sign (SF=0).
REX.W + 0F 4A /r CMOVP r64, r/m64 A Valid N.E. Move if parity (PF=1).
REX.W + 0F 4A /r CMOVPE r64, r/m64 A Valid N.E. Move if parity even (PF=1).
REX.W + 0F 4B /r CMOVNP r64, r/m64 A Valid N.E. Move if not parity (PF=0).
REX.W + 0F 4B /r CMOVPO r64, r/m64 A Valid N.E. Move if parity odd (PF=0).
REX.W + 0F 4C /r CMOVL r64, r/m64 A Valid N.E. Move if less (SF? OF).
REX.W + 0F 4C /r CMOVNGE r64, r/m64 A Valid N.E. Move if not greater or equal (SF? OF).
REX.W + 0F 4D /r CMOVGE r64, r/m64 A Valid N.E. Move if greater or equal (SF=OF).
REX.W + 0F 4D /r CMOVNL r64, r/m64 A Valid N.E. Move if not less (SF=OF).
REX.W + 0F 4E /r CMOVLE r64, r/m64 A Valid N.E. Move if less or equal (ZF=1 or SF? OF).
REX.W + 0F 4E /r CMOVNG r64, r/m64 A Valid N.E. Move if not greater (ZF=1 or SF? OF).
REX.W + 0F 4F /r CMOVG r64, r/m64 A Valid N.E. Move if greater (ZF=0 and
REX.W + 0F 4F /r CMOVNLE r64, r/m64 A Valid N.E. Move if not less or equal (ZF=0 and SF=OF).










	







